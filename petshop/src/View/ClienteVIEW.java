/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Bean.Animal;
import Bean.Cliente;
import Controller.AnimalController;
import Controller.ClienteController;
import View.AdicionarCliente;
import View.AlterarCliente;
import View.VerAnimal;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jocsa
 */
public class ClienteVIEW extends javax.swing.JInternalFrame {
    
    //O CLIENTE CONTROLLER COMO VAI SER INSTANCIADO MAIS DE UMA VEZ, ESTÁ DECLARADO COMO VARIAVEL DE CLASSE
    private  ClienteController clienteC;
    private  Cliente cliente;
    public ClienteVIEW() {
        clienteC = new ClienteController();
        cliente = new Cliente();
        initComponents();
        this.carregarTabela();
        this.setResizable(false);
    }
    
   
    
    public void atualizarTabela(){
        List<Cliente> listaClientes = this.clienteC.listar();
        
        Vector<String> colunas = new Vector<String>();        
        colunas.add("ID");
        colunas.add("Nome");
        colunas.add("Telefone");
        colunas.add("Endereço");
        
        Vector tuplas = new Vector();
        
        for(Cliente c: listaClientes){
            
            Vector<Object> tupla = new Vector<Object>();
            tupla.add(c.getId());
            tupla.add(c.getNome());
            tupla.add(c.getTelefone());
            tupla.add("rua: "+c.getRua());
            tuplas.add(tupla);
        }
        
        this.tabela.setModel(new DefaultTableModel(tuplas, colunas));
      
    }
    public void carregarTabela(){
        
        
        List<Cliente> listaClientes = clienteC.listar();
        
        Vector<String> colunas = new Vector<String>();        
        colunas.add("ID");
        colunas.add("Nome");
        colunas.add("Telefone");
        colunas.add("Endereço");
        
        Vector tuplas = new Vector();
        
        for(Cliente c: listaClientes){
            
            Vector<Object> tupla = new Vector<Object>();
            tupla.add(c.getId());
            tupla.add(c.getNome());
            tupla.add(c.getTelefone());
            tupla.add("rua: "+c.getRua());
            tuplas.add(tupla);
        }
        
        this.tabela.setModel(new DefaultTableModel(tuplas, colunas));
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        adicionar = new javax.swing.JButton();
        alterar = new javax.swing.JButton();
        excluir = new javax.swing.JButton();
        verAnimais = new javax.swing.JButton();

        setClosable(true);
        setPreferredSize(new java.awt.Dimension(990, 540));
        setRequestFocusEnabled(false);
        setVisible(true);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, adicionar, org.jdesktop.beansbinding.ELProperty.create("true"), this, org.jdesktop.beansbinding.BeanProperty.create("maximizable"));
        bindingGroup.addBinding(binding);

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Telefone", "Endereço"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabela);
        if (tabela.getColumnModel().getColumnCount() > 0) {
            tabela.getColumnModel().getColumn(0).setResizable(false);
            tabela.getColumnModel().getColumn(0).setPreferredWidth(100);
            tabela.getColumnModel().getColumn(1).setResizable(false);
            tabela.getColumnModel().getColumn(2).setResizable(false);
            tabela.getColumnModel().getColumn(3).setResizable(false);
        }

        adicionar.setText("Adicionar");
        adicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarActionPerformed(evt);
            }
        });

        alterar.setText("Alterar");
        alterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterarActionPerformed(evt);
            }
        });

        excluir.setText("Excluir");
        excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirActionPerformed(evt);
            }
        });

        verAnimais.setText("Ver Animais");
        verAnimais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verAnimaisActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 976, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(verAnimais, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(adicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(alterar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alterar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(verAnimais, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        bindingGroup.bind();

        setBounds(0, 0, 1012, 511);
    }// </editor-fold>//GEN-END:initComponents

    private void adicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarActionPerformed
        AdicionarCliente ec = new AdicionarCliente(this);
        ec.setVisible(true);
        
    }//GEN-LAST:event_adicionarActionPerformed

    private void alterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterarActionPerformed
       
        if(this.tabela.getModel().getValueAt(this.tabela.getSelectedRow(),0)==null){
            JOptionPane.showMessageDialog(this, "Por favor, selecione um cliente!");
        }else{
            //RECEBO O VALOR DA COLUNA ZERO DA TUPLA SELECIONADA 
            int id =(int) this.tabela.getModel().getValueAt(this.tabela.getSelectedRow(),0);
            //BUSCO O CLIENTE COM O ID INFORMADO (VERIFICAR METODO BUSCAR, GAMBIARRA)
            this.cliente = this.clienteC.buscarUm(id);
            //CHAMO O METODO ALTERAR PASSANDO O CLIENTE ATRAVEZ DO CONSTRUTOR DA CLASSE

            AlterarCliente ac = new AlterarCliente(cliente, this);

    //        JOptionPane.showMessageDialog(null, "A linha selecionada foi a: "+linha);

    //        ac.setVisible(true);
        }
        
    }//GEN-LAST:event_alterarActionPerformed

    private void verAnimaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verAnimaisActionPerformed
        
        //RECEBO O VALOR DA COLUNA ZERO DA TUPLA SELECIONADA 
        if(0 < (int) this.tabela.getModel().getValueAt(this.tabela.getSelectedRow(),0)){
            JOptionPane.showMessageDialog(this, "Por favor, selecione um cliente!");
        }else{
            int id =(int) this.tabela.getModel().getValueAt(this.tabela.getSelectedRow(),0);
            //BUSCO O CLIENTE COM O ID INFORMADO (VERIFICAR METODO BUSCAR, GAMBIARRA)
            this.cliente = this.clienteC.buscarUm(id);


            VerAnimal va = new VerAnimal(this.cliente);
            va.setVisible(true);
        }
        
    }//GEN-LAST:event_verAnimaisActionPerformed

    private void excluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirActionPerformed
        if(this.tabela.getModel().getValueAt(this.tabela.getSelectedRow(),0)==null){
            JOptionPane.showMessageDialog(this, "Por favor, selecione um cliente!");
        }else{
            //RECEBO O VALOR DA COLUNA ZERO(Onde está o ID) DA TUPLA SELECIONADA 
            int id = (int) this.tabela.getModel().getValueAt(this.tabela.getSelectedRow(), 0);

            AnimalController animalC = new AnimalController();

            animalC.deletarTodos(id);

            String nome = (String) this.tabela.getModel().getValueAt(this.tabela.getSelectedRow(), 1);
            int resultado = JOptionPane.showConfirmDialog(null, "Deseja realmente exlcuir o cliente "+nome+"?");
            if(resultado==0){
                this.clienteC.deletar(id);
                JOptionPane.showMessageDialog(null, "Cliente deletado com sucesso");
            }
            this.carregarTabela();
        }
        
        
    }//GEN-LAST:event_excluirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adicionar;
    private javax.swing.JButton alterar;
    private javax.swing.JButton excluir;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabela;
    private javax.swing.JButton verAnimais;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
